spring.application.name=Sistema-de-Controle-Financeiro-Pessoal

# ===================================================================
# COMMON APPLICATION PROPERTIES
# ===================================================================
server.port=8081

# ===================================================================
# SPRING DATA JPA (Hibernate)
# ===================================================================
# Configuração para H2 (Desenvolvimento)
spring.datasource.url=jdbc:h2:mem:controledb;DB_CLOSE_DELAY=-1
# spring.datasource.url=jdbc:h2:file:./data/controledb;DB_CLOSE_DELAY=-1 # Para persistir dados do H2 em arquivo
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
# Ou deixe em branco se preferir

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# 'update' atualiza o schema. 'create-drop' recria a cada reinício. Para dev, 'update' ou 'create' é bom.
spring.jpa.hibernate.ddl-auto=update
# Mostra os SQLs gerados no console, útil para debug
spring.jpa.show-sql=true
# Formata o SQL no console para melhor leitura
spring.jpa.properties.hibernate.format_sql=true

# H2 Console (para visualizar o banco H2 no navegador)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
# Mantenha false por segurança
spring.h2.console.settings.web-allow-others=false

# ===================================================================
# CONFIGURAÇÕES DE JWT
# ===================================================================
# ATENÇÃO: Em um ambiente de produção real, esta chave deve ser muito mais complexa e
# armazenada de forma segura (ex: variáveis de ambiente), e não diretamente no arquivo.
jwt.secret=SuaChaveSecretaSuperSeguraQueDeveSerLongaEDificilDeAdivinharParaNinguemDescobrir

# ===================================================================
# PostgreSQL (Produção - Comentado por enquanto, ou use perfis)
# ===================================================================
# Para usar com PostgreSQL, você precisará criar um banco de dados chamado 'controle_financeiro_db' (ou o nome que preferir)
# e um usuário/senha com permissões para acessá-lo.
#
# spring.datasource.url=jdbc:postgresql://localhost:5432/controle_financeiro_db
# spring.datasource.username=seu_usuario_postgres
# spring.datasource.password=sua_senha_postgres
# spring.datasource.driverClassName=org.postgresql.Driver
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.hibernate.ddl-auto=validate # Para produção, 'validate' ou 'none' é recomendado (e usar migrations como Flyway/Liquibase)